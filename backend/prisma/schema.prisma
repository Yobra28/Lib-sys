// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  LIBRARIAN
  STUDENT
}

enum BookStatus {
  AVAILABLE
  BORROWED
  RESERVED
  MAINTENANCE
}

enum BorrowStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  MAINTENANCE
}

enum ReservationStatus {
  PENDING
  APPROVED
  CANCELLED
  COMPLETED
}

enum FineStatus {
  PENDING
  PAID
  WAIVED
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole @default(STUDENT)
  phone         String?
  address       String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  borrows       Borrow[]
  reservations  SeatReservation[]
  feedback      Feedback[]
  fines         Fine[]
  notifications Notification[]

  @@map("users")
}

model Book {
  id              String     @id @default(uuid())
  title           String
  author          String
  isbn            String     @unique
  category        String
  publisher       String?
  publishedYear   Int?
  edition         String?
  totalCopies     Int        @default(1)
  availableCopies Int        @default(1)
  description     String?
  coverImage   String? 
  status          BookStatus @default(AVAILABLE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  borrows Borrow[]

  @@map("books")
}

model Borrow {
  id           String       @id @default(uuid())
  userId       String
  bookId       String
  borrowDate   DateTime     @default(now())
  dueDate      DateTime
  returnDate   DateTime?
  status       BorrowStatus @default(ACTIVE)
  renewalCount Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  book  Book   @relation(fields: [bookId], references: [id])
  fines Fine[]

  @@map("borrows")
}

model Seat {
  id           String     @id @default(uuid())
  seatNumber   String     @unique
  floor        Int        @default(1)
  section      String
  status       SeatStatus @default(AVAILABLE)
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  reservations SeatReservation[]

  @@map("seats")
}

model SeatReservation {
  id              String            @id @default(uuid())
  userId          String
  seatId          String
  reservationDate DateTime
  startTime       DateTime
  endTime         DateTime
  status          ReservationStatus @default(PENDING)
  approvedBy      String?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id])
  seat Seat @relation(fields: [seatId], references: [id])

  @@map("seat_reservations")
}

model Fine {
  id          String     @id @default(uuid())
  userId      String
  borrowId    String
  amount      Float
  reason      String
  status      FineStatus @default(PENDING)
  paidDate    DateTime?
  waivedBy    String?
  waivedDate  DateTime?
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  borrow Borrow @relation(fields: [borrowId], references: [id])

  @@map("fines")
}

model FineConfiguration {
  id          String   @id @default(uuid())
  dailyRate   Float    @default(50.0)
  isActive    Boolean  @default(true)
  createdBy   String
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fine_configurations")
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  subject   String
  message   String
  response  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("feedback")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model SystemConfig {
  id            String   @id @default(uuid())
  key           String   @unique
  value         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("system_config")
}